var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ErrorHandler, Injectable } from "@angular/core";
import { Bugsnag } from "@bugsnag/js";
let BugsnagErrorHandler = class BugsnagErrorHandler extends ErrorHandler {
    constructor(bugsnagClient) {
        super();
        this.bugsnagClient = bugsnagClient;
    }
    handleError(error) {
        const handledState = {
            severity: "error",
            severityReason: { type: "unhandledException" },
            unhandled: true,
        };
        const report = new this.bugsnagClient.BugsnagReport(error.name, error.message, this.bugsnagClient.BugsnagReport.getStacktrace(error), handledState, error);
        if (error.ngDebugContext) {
            report.updateMetaData("angular", {
                component: error.ngDebugContext.component,
                context: error.ngDebugContext.context,
            });
        }
        this.bugsnagClient.notify(report);
        ErrorHandler.prototype.handleError.call(this, error);
    }
};
BugsnagErrorHandler = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Bugsnag.Client])
], BugsnagErrorHandler);
export { BugsnagErrorHandler };
const ɵ0 = (client) => {
    return new BugsnagErrorHandler(client);
};
const plugin = {
    init: ɵ0,
    name: "Angular",
};
export default plugin;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd0QyxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFvQixTQUFRLFlBQVk7SUFFbkQsWUFBWSxhQUE2QjtRQUN2QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxXQUFXLENBQUMsS0FBVTtRQUMzQixNQUFNLFlBQVksR0FBRztZQUNuQixRQUFRLEVBQUUsT0FBTztZQUNqQixjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7WUFDOUMsU0FBUyxFQUFFLElBQUk7U0FDaEIsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQ2pELEtBQUssQ0FBQyxJQUFJLEVBQ1YsS0FBSyxDQUFDLE9BQU8sRUFDYixJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQ3JELFlBQVksRUFDWixLQUFLLENBQ04sQ0FBQztRQUVGLElBQUksS0FBSyxDQUFDLGNBQWMsRUFBRTtZQUN4QixNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRTtnQkFDL0IsU0FBUyxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsU0FBUztnQkFDekMsT0FBTyxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTzthQUN0QyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGLENBQUE7QUFoQ1ksbUJBQW1CO0lBRC9CLFVBQVUsRUFBRTtxQ0FHZ0IsT0FBTyxDQUFDLE1BQU07R0FGOUIsbUJBQW1CLENBZ0MvQjtTQWhDWSxtQkFBbUI7V0FtQ3hCLENBQUMsTUFBc0IsRUFBZ0IsRUFBRTtJQUM3QyxPQUFPLElBQUksbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUhILE1BQU0sTUFBTSxHQUFvQjtJQUM5QixJQUFJLElBRUg7SUFDRCxJQUFJLEVBQUUsU0FBUztDQUNoQixDQUFDO0FBRUYsZUFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcnJvckhhbmRsZXIsIEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQnVnc25hZyB9IGZyb20gXCJAYnVnc25hZy9qc1wiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnVnc25hZ0Vycm9ySGFuZGxlciBleHRlbmRzIEVycm9ySGFuZGxlciB7XG4gIHB1YmxpYyBidWdzbmFnQ2xpZW50OiBCdWdzbmFnLkNsaWVudDtcbiAgY29uc3RydWN0b3IoYnVnc25hZ0NsaWVudDogQnVnc25hZy5DbGllbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYnVnc25hZ0NsaWVudCA9IGJ1Z3NuYWdDbGllbnQ7XG4gIH1cblxuICBwdWJsaWMgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGhhbmRsZWRTdGF0ZSA9IHtcbiAgICAgIHNldmVyaXR5OiBcImVycm9yXCIsXG4gICAgICBzZXZlcml0eVJlYXNvbjogeyB0eXBlOiBcInVuaGFuZGxlZEV4Y2VwdGlvblwiIH0sXG4gICAgICB1bmhhbmRsZWQ6IHRydWUsXG4gICAgfTtcblxuICAgIGNvbnN0IHJlcG9ydCA9IG5ldyB0aGlzLmJ1Z3NuYWdDbGllbnQuQnVnc25hZ1JlcG9ydChcbiAgICAgIGVycm9yLm5hbWUsXG4gICAgICBlcnJvci5tZXNzYWdlLFxuICAgICAgdGhpcy5idWdzbmFnQ2xpZW50LkJ1Z3NuYWdSZXBvcnQuZ2V0U3RhY2t0cmFjZShlcnJvciksXG4gICAgICBoYW5kbGVkU3RhdGUsXG4gICAgICBlcnJvcixcbiAgICApO1xuXG4gICAgaWYgKGVycm9yLm5nRGVidWdDb250ZXh0KSB7XG4gICAgICByZXBvcnQudXBkYXRlTWV0YURhdGEoXCJhbmd1bGFyXCIsIHtcbiAgICAgICAgY29tcG9uZW50OiBlcnJvci5uZ0RlYnVnQ29udGV4dC5jb21wb25lbnQsXG4gICAgICAgIGNvbnRleHQ6IGVycm9yLm5nRGVidWdDb250ZXh0LmNvbnRleHQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1Z3NuYWdDbGllbnQubm90aWZ5KHJlcG9ydCk7XG4gICAgRXJyb3JIYW5kbGVyLnByb3RvdHlwZS5oYW5kbGVFcnJvci5jYWxsKHRoaXMsIGVycm9yKTtcbiAgfVxufVxuXG5jb25zdCBwbHVnaW46IEJ1Z3NuYWcuSVBsdWdpbiA9IHtcbiAgaW5pdDogKGNsaWVudDogQnVnc25hZy5DbGllbnQpOiBFcnJvckhhbmRsZXIgPT4ge1xuICAgIHJldHVybiBuZXcgQnVnc25hZ0Vycm9ySGFuZGxlcihjbGllbnQpO1xuICB9LFxuICBuYW1lOiBcIkFuZ3VsYXJcIixcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBsdWdpbjtcbiJdfQ==